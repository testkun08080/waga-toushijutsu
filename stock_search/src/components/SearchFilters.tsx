import React, { useState } from 'react';
import { MARKET_OPTIONS } from '../types/stock';
import type { SearchFilters as SearchFiltersType } from '../types/stock';

interface SearchFiltersProps {
  filters: SearchFiltersType;
  availableIndustries: string[];
  onFilterChange: (key: keyof SearchFiltersType, value: string | number | string[] | null) => void;
  onClearFilters: () => void;
}

// жЃйжЂЊт║юуюїсЂ«сѓфсЃЌсѓисЃДсЃ│
const PREFECTURE_OPTIONS = [
  'тїЌТхижЂЊ', 'жЮњТБ«уюї', 'т▓ЕТЅІуюї', 'т««тЪјуюї', 'уДІућ░уюї', 'т▒▒тйбуюї', 'удЈт│Хуюї',
  'УїетЪјуюї', 'ТаЃТюеуюї', 'уЙцждгуюї', 'тЪ╝ујЅуюї', 'тЇЃУЉЅуюї', 'ТЮ▒С║гжЃй', 'уЦътЦѕтиЮуюї',
  'Тќ░ТйЪуюї', 'т»їт▒▒уюї', 'уЪ│тиЮуюї', 'удЈС║Ћуюї', 'т▒▒Тбеуюї', 'жЋижЄјуюї', 'т▓љжўюуюї',
  'жЮЎт▓Ауюї', 'ТёЏуЪЦуюї', 'СИЅжЄЇуюї', 'Т╗ІУ│ђуюї', 'С║гжЃйт║ю', 'тцДжўфт║ю', 'тЁхт║Фуюї',
  'тЦѕУЅ»уюї', 'тњїТГїт▒▒уюї', 'ж│ЦтЈќуюї', 'т│ХТа╣уюї', 'т▓Ат▒▒уюї', 'т║Ѓт│Хуюї', 'т▒▒тЈБуюї',
  'тЙ│т│Хуюї', 'ждЎтиЮуюї', 'ТёЏтфЏуюї', 'жФўуЪЦуюї', 'удЈт▓Ауюї', 'СйљУ│ђуюї', 'жЋит┤јуюї',
  'уєіТюгуюї', 'тцДтѕєуюї', 'т««т┤јуюї', 'ж╣┐тЁљт│Хуюї', 'Т▓ќуИёуюї'
];

export const SearchFilters: React.FC<SearchFiltersProps> = ({
  filters,
  availableIndustries,
  onFilterChange,
  onClearFilters
}) => {
  const [expandedSections, setExpandedSections] = useState({
    basic: true,
    valuation: false,
    performance: false,
    balance: false,
    cash: false
  });

  const toggleSection = (section: keyof typeof expandedSections) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };

  const handleIndustryChange = (industry: string, checked: boolean) => {
    const currentIndustries = filters.industries || [];
    if (checked) {
      onFilterChange('industries', [...currentIndustries, industry]);
    } else {
      onFilterChange('industries', currentIndustries.filter(i => i !== industry));
    }
  };

  const NumberRangeInput = ({
    label,
    unit = '',
    minKey,
    maxKey,
    step = 1,
    isInteger = false
  }: {
    label: string;
    unit?: string;
    minKey: keyof SearchFiltersType;
    maxKey: keyof SearchFiltersType;
    step?: number;
    isInteger?: boolean;
  }) => (
    <div className="form-control">
      <label className="label">
        <span className="label-text text-sm">{label} {unit && `(${unit})`}</span>
      </label>
      <div className="flex items-center gap-2">
        <input
          type="number"
          className="input input-bordered input-sm flex-1"
          placeholder="Тюђт░Ј"
          step={step}
          value={filters[minKey] || ''}
          onChange={(e) => onFilterChange(minKey, e.target.value ? (isInteger ? parseInt(e.target.value) : parseFloat(e.target.value)) : null)}
        />
        <span className="text-xs opacity-60">сђю</span>
        <input
          type="number"
          className="input input-bordered input-sm flex-1"
          placeholder="ТюђтцД"
          step={step}
          value={filters[maxKey] || ''}
          onChange={(e) => onFilterChange(maxKey, e.target.value ? (isInteger ? parseInt(e.target.value) : parseFloat(e.target.value)) : null)}
        />
      </div>
    </div>
  );

  return (
    <div className="bg-base-100 rounded-lg shadow-sm p-6 mb-6">
      <div className="flex items-center justify-between mb-6">
        <h3 className="text-xl font-semibold text-base-content">­ЪћЇ Тцюу┤бсЃЋсѓБсЃФсѓ┐сЃ╝</h3>
        <button
          onClick={onClearFilters}
          className="btn btn-outline btn-sm"
        >
          ­ЪЌЉ№ИЈ сЂЎсЂ╣сЂдсѓ»сЃфсѓб
        </button>
      </div>

      {/* тЪ║ТюгсЃЋсѓБсЃФсѓ┐сЃ╝ */}
      <div className="collapse collapse-arrow bg-base-200 mb-4">
        <input
          type="checkbox"
          checked={expandedSections.basic}
          onChange={() => toggleSection('basic')}
        />
        <div className="collapse-title text-lg font-medium">
          ­ЪЊІ тЪ║ТюгсЃЋсѓБсЃФсѓ┐сЃ╝
        </div>
        <div className="collapse-content">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            {/* С╝џуцЙтљЇТцюу┤б */}
            <div className="form-control">
              <label className="label">
                <span className="label-text">С╝џуцЙтљЇ</span>
              </label>
              <input
                type="text"
                className="input input-bordered input-sm"
                placeholder="С╝џуцЙтљЇсЂДТцюу┤б"
                value={filters.companyName}
                onChange={(e) => onFilterChange('companyName', e.target.value)}
              />
            </div>

            {/* тИѓта┤жЂИТіъ */}
            <div className="form-control">
              <label className="label">
                <span className="label-text">тёфтЁѕтИѓта┤</span>
              </label>
              <select
                className="select select-bordered select-sm"
                value={filters.market}
                onChange={(e) => onFilterChange('market', e.target.value)}
              >
                <option value="">сЂЎсЂ╣сЂд</option>
                {MARKET_OPTIONS.map((market) => (
                  <option key={market} value={market}>
                    {market.replace('№╝ѕтєЁтЏйТафт╝Ј№╝Ѕ', '')}
                  </option>
                ))}
              </select>
            </div>

            {/* жЃйжЂЊт║юуюїжЂИТіъ */}
            <div className="form-control">
              <label className="label">
                <span className="label-text">жЃйжЂЊт║юуюї</span>
              </label>
              <select
                className="select select-bordered select-sm"
                value={filters.prefecture}
                onChange={(e) => onFilterChange('prefecture', e.target.value)}
              >
                <option value="">сЂЎсЂ╣сЂд</option>
                {PREFECTURE_OPTIONS.map((prefecture) => (
                  <option key={prefecture} value={prefecture}>
                    {prefecture}
                  </option>
                ))}
              </select>
            </div>

            {/* ТЎѓСЙАуиЈжАЇ */}
            <NumberRangeInput
              label="ТЎѓСЙАуиЈжАЇ"
              unit="тёётєє"
              minKey="marketCapMin"
              maxKey="marketCapMax"
              isInteger={true}
            />
          </div>

          {/* ТЦГуе«жЂИТіъ№╝ѕУцЄТЋ░жЂИТіъ№╝Ѕ */}
          <div className="form-control mt-6">
            <label className="label">
              <span className="label-text">ТЦГуе«жЂИТіъ№╝ѕУцЄТЋ░жЂИТіътЈ»№╝Ѕ</span>
              <span className="label-text-alt">{filters.industries.length > 0 ? `${filters.industries.length}С╗ХжЂИТіъСИГ` : ''}</span>
            </label>
            <div className="bg-base-100 border border-base-300 rounded-lg p-4 max-h-48 overflow-y-auto">
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                {availableIndustries.map((industry) => (
                  <label key={industry} className="label cursor-pointer justify-start">
                    <input
                      type="checkbox"
                      className="checkbox checkbox-sm mr-2"
                      checked={filters.industries.includes(industry)}
                      onChange={(e) => handleIndustryChange(industry, e.target.checked)}
                    />
                    <span className="label-text text-sm">{industry}</span>
                  </label>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* сЃљсЃфсЃЦсѓесЃ╝сѓисЃДсЃ│ТїЄТеЎ */}
      <div className="collapse collapse-arrow bg-base-200 mb-4">
        <input
          type="checkbox"
          checked={expandedSections.valuation}
          onChange={() => toggleSection('valuation')}
        />
        <div className="collapse-title text-lg font-medium">
          ­ЪЊі сЃљсЃфсЃЦсѓесЃ╝сѓисЃДсЃ│ТїЄТеЎ
        </div>
        <div className="collapse-content">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <NumberRangeInput label="PBR" minKey="pbrMin" maxKey="pbrMax" step={0.1} />
            <NumberRangeInput label="ROE" unit="%" minKey="roeMin" maxKey="roeMax" step={0.1} />
            <NumberRangeInput label="УЄфти▒У│ЄТюгТ»ћујЄ" unit="%" minKey="equityRatioMin" maxKey="equityRatioMax" step={0.1} />
            <NumberRangeInput label="PER(С╝џС║ѕ)" minKey="forwardPEMin" maxKey="forwardPEMax" step={0.1} />
          </div>
        </div>
      </div>

      {/* ТЦГуИЙсЃ╗тЈјуЏіТђД */}
      <div className="collapse collapse-arrow bg-base-200 mb-4">
        <input
          type="checkbox"
          checked={expandedSections.performance}
          onChange={() => toggleSection('performance')}
        />
        <div className="collapse-title text-lg font-medium">
          ­Ъњ╣ ТЦГуИЙсЃ╗тЈјуЏіТђДТїЄТеЎ
        </div>
        <div className="collapse-content">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <NumberRangeInput label="тБ▓СИіжФў" unit="тёётєє" minKey="revenueMin" maxKey="revenueMax" isInteger={true} />
            <NumberRangeInput label="тќХТЦГтѕЕуЏі" unit="тёётєє" minKey="operatingProfitMin" maxKey="operatingProfitMax" isInteger={true} />
            <NumberRangeInput label="тќХТЦГтѕЕуЏіујЄ" unit="%" minKey="operatingMarginMin" maxKey="operatingMarginMax" step={0.1} />
            <NumberRangeInput label="тйЊТюЪу┤ћтѕЕуЏі" unit="тёётєє" minKey="netProfitMin" maxKey="netProfitMax" isInteger={true} />
            <NumberRangeInput label="у┤ћтѕЕуЏіујЄ" unit="%" minKey="netMarginMin" maxKey="netMarginMax" step={0.1} />
          </div>
        </div>
      </div>

      {/* сЃљсЃЕсЃ│сѓ╣сѓисЃ╝сЃѕ */}
      <div className="collapse collapse-arrow bg-base-200 mb-4">
        <input
          type="checkbox"
          checked={expandedSections.balance}
          onChange={() => toggleSection('balance')}
        />
        <div className="collapse-title text-lg font-medium">
          ­ЪЈЏ№ИЈ сЃљсЃЕсЃ│сѓ╣сѓисЃ╝сЃѕТїЄТеЎ
        </div>
        <div className="collapse-content">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <NumberRangeInput label="У▓атѓх" unit="тёётєє" minKey="totalLiabilitiesMin" maxKey="totalLiabilitiesMax" isInteger={true} />
            <NumberRangeInput label="ТхЂтІЋУ▓атѓх" unit="тёётєє" minKey="currentLiabilitiesMin" maxKey="currentLiabilitiesMax" isInteger={true} />
            <NumberRangeInput label="ТхЂтІЋУ│ЄућБ" unit="тёётєє" minKey="currentAssetsMin" maxKey="currentAssetsMax" isInteger={true} />
            <NumberRangeInput label="уиЈУ▓атѓх" unit="тёётєє" minKey="totalDebtMin" maxKey="totalDebtMax" isInteger={true} />
            <NumberRangeInput label="ТіЋУ│ЄТюЅСЙАУе╝тѕИ" unit="тёётєє" minKey="investmentsMin" maxKey="investmentsMax" isInteger={true} />
          </div>
        </div>
      </div>

      {/* сѓГсЃБсЃЃсѓисЃЦжќбжђБ */}
      <div className="collapse collapse-arrow bg-base-200 mb-4">
        <input
          type="checkbox"
          checked={expandedSections.cash}
          onChange={() => toggleSection('cash')}
        />
        <div className="collapse-title text-lg font-medium">
          ­Ъњ░ сѓГсЃБсЃЃсѓисЃЦжќбжђБТїЄТеЎ
        </div>
        <div className="collapse-content">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            <NumberRangeInput label="уЈЙжЄЉтЈісЂ│уЈЙжЄЉтљїуГЅуЅЕ" unit="тёётєє" minKey="cashMin" maxKey="cashMax" isInteger={true} />
            <NumberRangeInput label="сЃЇсЃЃсЃѕсѓГсЃБсЃЃсѓисЃЦ" unit="тёётєє" minKey="netCashMin" maxKey="netCashMax" isInteger={true} />
            <NumberRangeInput label="сЃЇсЃЃсЃѕсѓГсЃБсЃЃсѓисЃЦТ»ћујЄ" unit="%" minKey="netCashRatioMin" maxKey="netCashRatioMax" step={0.1} />
          </div>
        </div>
      </div>
    </div>
  );
};